# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '01153.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

 
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QPushButton
import configparser
import cv2


timecount = 0


class secondwindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(414, 730)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.MainWindow = MainWindow
        self.MainWindow.setWindowFlags(QtCore.Qt.Window | QtCore.Qt.CustomizeWindowHint | QtCore.Qt.FramelessWindowHint)
        
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 414, 730))
        self.label.setObjectName("label")
        self.label.setPixmap(QtGui.QPixmap("test.jpg"))
        
        self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_1.setGeometry(QtCore.QRect(20, 660, 75, 23))
        self.pushButton_1.setObjectName("pushButton")
        self.pushButton_1.setStyleSheet("color: white; background-color: rgba(0, 0, 0, 0.0);")
        self.pushButton_1.setText("사진")
        self.pushButton_1.pressed.connect(self.open2)
        
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(90, 660, 75, 23))
        self.pushButton_2.setObjectName("pushButton")
        self.pushButton_2.setStyleSheet("color: white; background-color: rgba(0, 0, 0, 0.0);")
        self.pushButton_2.setText("동영상")
        self.pushButton_2.pressed.connect(self.open3)
        
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(160, 660, 75, 23))
        self.pushButton_3.setObjectName("pushButton")
        self.pushButton_3.setStyleSheet("color: white; background-color: rgba(0, 0, 0, 0.0);")
        self.pushButton_3.setText("CCTV")
        self.pushButton_3.pressed.connect(self.open4)
        
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(230, 660, 75, 23))
        self.pushButton_4.setObjectName("pushButton")
        self.pushButton_4.setStyleSheet("color: white; background-color: rgba(0, 0, 0, 0.0);")
        self.pushButton_4.setText("닫기")
        self.pushButton_4.pressed.connect(self.open5)
        
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(300, 660, 75, 23))
        self.pushButton_5.setObjectName("pushButton")
        self.pushButton_5.setStyleSheet("color: white; background-color: rgba(0, 0, 0, 0.0);")
        self.pushButton_5.setText("로그 아웃")
        self.pushButton_5.pressed.connect(self.open6)
        
        self.stop = 0
        
    def open2(self):
        image = cv2.imread("004.jpg", cv2.IMREAD_ANYCOLOR)
        cv2.imshow("004", image)
        cv2.waitKey()
        if self.stop == 1:
            self.stop = 0
        
            
    def open3(self):
        image_files = ['C:\\study\\20240117\\dessert.mp4']
        for image_file in image_files:
            cap = cv2.VideoCapture(image_file)
            if cap.isOpened():
                while True:
                    ret, img = cap.read() # ret: 영상이 끊겼는지 아닌지 확인 img: 이미지 + 코덱
                    if ret: # 영상이 값이 있다면 아래를 실행
                        cv2.imshow(image_file, img)
                        if cv2.waitKey(1000) == 27:
                            break
                        if self.stop == 1:
                            self.stop = 0
                            break
                    else:
                        cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
        else:
            print('can not') 
                
    def open4(self):
        image_files = "rtsp://210.99.70.120:1935/live/cctv001.stream"
        cap = cv2.VideoCapture(image_files)
        while cap.isOpened():
            ret, img = cap.read()
            if ret:
                cv2.imshow(image_files, img)
                cv2.waitKey(33)
                if self.stop == 1:
                    self.stop = 0
                    break

        else:
            print("can not")
        cap.release()
        cv2.destroyAllWindows()
                
                
    def open5(self):
        cv2.destroyAllWindows()
        self.stop = 1
        
    def open6(self):
        self.close(secondwindow)
        self.open(Ui_MainWindow)
    

class Ui_MainWindow(QtWidgets.QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(414, 730)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.MainWindow = MainWindow
        self.MainWindow.setWindowFlags(QtCore.Qt.Window | QtCore.Qt.CustomizeWindowHint | QtCore.Qt.FramelessWindowHint)

        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(0, 0, 414, 730))
        self.label_4.setObjectName("label_4")
        self.label_4.setPixmap(QtGui.QPixmap("lock2.jpg"))
        
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(0, 0, 516, 730))
        self.label_5.setObjectName("label_5")
        
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(160, 500, 120, 20))
        self.label_3.setObjectName("label_3")
        self.label_3.setStyleSheet("color: white;")
        
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(230, 500, 100, 20))
        self.label_6.setObjectName("label_6")
        self.label_6.setStyleSheet("color: white;")
        
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(210, 500, 100, 20))
        self.label_7.setObjectName("label_7")
        self.label_7.setStyleSheet("color: white;")
        
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(180, 555, 200, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setStyleSheet("color: white; background-color: rgba(0, 0, 0, 0.0); border: none;")
        
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(180, 608, 200, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.setStyleSheet("color: white; background-color: rgba(0, 0, 0, 0.0); border: none;")
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
        
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(150, 680, 75, 20))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setStyleSheet("color: white; background-color: rgba(0, 0, 0, 0.0);")
        
        
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.lineEdit_2.returnPressed.connect(self.rejult)
        self.pushButton.pressed.connect(self.rejult)
        
        self.incorrect_attempts = 0
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.exit_application)
        self.remaining_seconds = 5

        
    def rejult(self):
        config = configparser.ConfigParser()
        config.read("ai.ini")
        iid = config['user']['id']
        text = self.lineEdit.text()
        ppw = config['user']['pw']
        text2 = self.lineEdit_2.text()
        if text == iid and text2 == ppw :
            self.window = QtWidgets.QWidget()
            self.ui = secondwindow()
            self.ui.setupUi(self.window)
            self.window.show()
            MainWindow.hide()
                
        else:
            self.label_3.setHidden(False)
            self.label_6.setHidden(False)
            self.incorrect_attempts +=1
            self.label_3.setText("Error")     
            if self.incorrect_attempts < 6:
                self.label_6.setText(f'{self.incorrect_attempts}/5')
                self.label_6.setHidden(False)
                if self.incorrect_attempts == 5:
                    self.disable_input_fields()
                    self.timer.start(1000)


                
    def disable_input_fields(self):
        self.lineEdit.setDisabled(True)
        self.lineEdit_2.setDisabled(True)
        self.pushButton.setDisabled(True)
        self.label_3.setText("Wait for 30 seconds")
        self.label_6.setHidden(True)
        
    def enable_input_fields(self):
        self.label_3.setText("Enter it again")
        self.lineEdit.setEnabled(True)
        self.lineEdit_2.setEnabled(True)
        self.pushButton.setDisabled(True)
            
    
    def exit_application(self):
        self.remaining_seconds -= 1
        
        if self.remaining_seconds == 0:
            self.timer.stop()
            self.enable_input_fields()
            self.incorrect_attempts = 0
            self.remaining_seconds = 5
            self.label_6.setHidden(True)
                
           
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
