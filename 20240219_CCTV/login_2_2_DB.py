# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled3.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QImage, QPalette
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QPushButton, QListWidget, QMessageBox, QLineEdit, QTextEdit
from PyQt5.QtCore import QThread, pyqtSignal, Qt, QCoreApplication

from PyQt5.QtCore import QThread, pyqtSignal, Qt
from PyQt5.QtGui import QPixmap, QImage, QPalette
from PyQt5 import QtWidgets, QtCore, QtGui

import configparser
import time
import cv2
import os

from PyQt5.QtCore import QThread

import sqlite3
import pandas as pd

gcount = 0
timecount = 0

# rtsp_db = pd.read_sql("SELECT * FROM rtsp", con)

class Ui_MainWindow(QtWidgets.QWidget):
    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow    
        
        self.MainWindow.setWindowFlags(QtCore.Qt.Window | QtCore.Qt.CustomizeWindowHint | QtCore.Qt.FramelessWindowHint)
        
        
        MainWindow.setObjectName("MainWindow") #if__name__main에서 상속받아서 앞으로는 MainWindow로 사용
        MainWindow.resize(1920, 1080)
        self.centralwidget = QtWidgets.QWidget(MainWindow) #위젯 중앙을 설정을 하고 centralwidget에 MainWindow가 모두 넘겨줌(상속)
        self.centralwidget.setObjectName("centralwidget")

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(1, 1, 1920, 1080))
        self.label_3.setObjectName("label_3")
        self.label_3.setPixmap(QtGui.QPixmap("figma2.jpg"))
        
        self.label_3_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_3_1.setGeometry(QtCore.QRect(457, 156, 670, 300))
        self.label_3_1.setObjectName("label_3")
        
        
        self.label_3_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_3_2.setGeometry(QtCore.QRect(1195, 158, 670, 300))
        self.label_3_2.setObjectName("label_3")
        
        
        self.label_3_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3_3.setGeometry(QtCore.QRect(455, 519 , 670, 300))
        self.label_3_3.setObjectName("label_3")
        
        self.label_3_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_3_4.setGeometry(QtCore.QRect(1195, 521, 670, 300))
        self.label_3_4.setObjectName("label_3")
       
        
        self.label = QLabel(self)
        self.label.setGeometry(QtCore.QRect(120, 590, 200, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(460, 590, 56, 20))
        self.label_2.setObjectName("label_2")      
                
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(1, 350, 414, 350))
        self.label_4.setObjectName("label_4")
        self.label_4.setPixmap(QtGui.QPixmap("test.png"))
        self.label_4.setHidden(True)
        
        # self.label_5 = QtWidgets.QLabel(self.centralwidget)
        # self.label_5.setGeometry(QtCore.QRect(28, 60, 414, 350))
        # self.label_5.setObjectName("label_5")       
        # self.label_5.setText(" AI 반에 오신것을 환영합니다!\n"
        #                      "ID와 PassWord를 입력해주세요!")
        # self.label_5.setFont(QtGui.QFont("바탕", 19))
        # self.label_5.setStyleSheet("Color : red")

        # self.label_6 = QtWidgets.QLabel(self.centralwidget)
        # self.label_6.setGeometry(QtCore.QRect(120, 620, 200, 20))
        # self.label_6.setObjectName("label")
        
        
        # self.lineEdit_1 = QtWidgets.QLineEdit(self.centralwidget)
        # self.lineEdit_1.setGeometry(QtCore.QRect(607, 450, 250, 30))
        # self.lineEdit_1.setObjectName("lineEdit_1")
        
        # self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        # self.lineEdit_2.setGeometry(QtCore.QRect(1348, 453, 250, 30))
        # self.lineEdit_2.setObjectName("lineEdit_2")
        
        # self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        # self.lineEdit_3.setGeometry(QtCore.QRect(607, 812, 250, 30))
        # self.lineEdit_3.setObjectName("lineEdit_3")
        
        # self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        # self.lineEdit_4.setGeometry(QtCore.QRect(1372, 812, 250, 30))
        # self.lineEdit_4.setObjectName("lineEdit_4")
        
        self.rtspButton1 = QtWidgets.QPushButton(self.centralwidget)
        self.rtspButton1.setGeometry(QtCore.QRect(455, 455, 50, 20))
        self.rtspButton1.setObjectName("rtspButton")
        self.rtspButton1.setText("RTSP1")
        self.rtspButton1.clicked.connect(self.open_1)
        
        self.rtspButton2 = QtWidgets.QPushButton(self.centralwidget)
        self.rtspButton2.setGeometry(QtCore.QRect(1196, 455, 50, 20))
        self.rtspButton2.setObjectName("rtspButton")
        self.rtspButton2.setText("RTSP2")
        self.rtspButton2.clicked.connect(self.open_2)
        
        self.rtspButton3 = QtWidgets.QPushButton(self.centralwidget)
        self.rtspButton3.setGeometry(QtCore.QRect(457, 817, 50, 20))
        self.rtspButton3.setObjectName("rtspButton")
        self.rtspButton3.setText("RTSP3")
        self.rtspButton3.clicked.connect(self.open_3)
        
        self.rtspButton4 = QtWidgets.QPushButton(self.centralwidget)
        self.rtspButton4.setGeometry(QtCore.QRect(1196, 817, 50, 20))
        self.rtspButton4.setObjectName("rtspButton")
        self.rtspButton4.setText("RTSP4")
        self.rtspButton4.clicked.connect(self.open_4)
        
        
        self.btn = QPushButton(self.centralwidget)
        self.btn.setGeometry(1466, 996, 175, 46)
        self.btn.setObjectName("PushButton")
        self.btn.setText("Stop")
        self.btn.clicked.connect(QCoreApplication.instance().quit)
        
        # self.th = Thread(self)
        # self.th.changePixmap.connect(self.label_3_1.setPixmap)
        # self.th.start()
        
        # self.th2 = Thread2(self)
        # self.th2.changePixmap.connect(self.label_3_2.setPixmap)
        # self.th2.start()
        
        # self.th3 = Thread3(self)
        # self.th3.changePixmap.connect(self.label_3_3.setPixmap)
        # self.th3.start()
         
        # self.th4 = Thread4(self)
        # self.th4.changePixmap.connect(self.label_3_4.setPixmap)
        # self.th4.start()

        MainWindow.setCentralWidget(self.centralwidget)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # self.retranslateUi(MainWindow)
        # QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # self.rtspButton1.returnPressed.connect(self.open_1)
        
        # self.retranslateUi(MainWindow)
        # QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # self.rtspButton2.returnPressed.connect(self.open_2)
        
        # self.retranslateUi(MainWindow)
        # QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # self.rtspButton3.returnPressed.connect(self.open_3)
        
        # self.retranslateUi(MainWindow)
        # QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # self.rtspButton4.returnPressed.connect(self.open_4)
        # print("test")

    def open(self):
        image_files = self.get_files('D:\\Development\\bugyungde\\imagmovie_test\\')

        img = cv2.imread(image_files[0])
        height,width,channel = img.shape
        fps = 30

        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        writer = cv2.VideoWriter(BASE_DIR + '/' + 'output3.mp4', fourcc, fps, (width, height))

        for file in image_files:

            img = cv2.imread(file)

            writer.write(img)

            cv2.imshow("Color", img)

            # ESC키 누르면 중지
            if cv2.waitKey(33) == 27:
                break
            
    def open_1(self):
        # text = self.lineEdit_1.text()
        # con = sqlite3.connect('./rtsp_2.db')
        # cur = con.cursor()
        
        # cur.execute("INSERT INTO rtsp (address) VALUES (?);", (text,))

        # # 변경 내용 커밋 및 데이터베이스 연결 종료
        # con.commit()
        # con.close()
        # self.lineEdit_1.hide()
        
        self.th = Thread(self)
        self.th.changePixmap.connect(self.label_3_1.setPixmap)
        self.th.start()

    def open_2(self):
        # text = self.lineEdit_2.text()
        # con = sqlite3.connect('./rtsp_2.db')
        # cur = con.cursor()
        
        # cur.execute("INSERT INTO rtsp (address) VALUES (?);", (text,))

        # # 변경 내용 커밋 및 데이터베이스 연결 종료
        # con.commit()
        # con.close()
        # self.lineEdit_2.hide()
        
        self.th2 = Thread2(self)
        self.th2.changePixmap.connect(self.label_3_2.setPixmap)
        self.th2.start()
        
    def open_3(self):
        # text = self.lineEdit_3.text()
        # con = sqlite3.connect('./rtsp_2.db')
        # cur = con.cursor()
        
        # cur.execute("INSERT INTO rtsp (address) VALUES (?);", (text,))

        # # 변경 내용 커밋 및 데이터베이스 연결 종료
        # con.commit()
        # con.close()
        # self.lineEdit_3.hide()
        
        self.th3 = Thread3(self)
        self.th3.changePixmap.connect(self.label_3_3.setPixmap)
        self.th3.start()
        
    def open_4(self):
        # text = self.lineEdit_4.text()
        # con = sqlite3.connect('./rtsp_2.db')
        # cur = con.cursor()
        
        # cur.execute("INSERT INTO rtsp (address) VALUES (?);", (text,))

        # # 변경 내용 커밋 및 데이터베이스 연결 종료
        # con.commit()
        # con.close()
        # self.lineEdit_4.hide()
        
        self.th4 = Thread4(self)
        self.th4.changePixmap.connect(self.label_3_4.setPixmap)
        self.th4.start()

    
    
    def get_files(self, path):
        for root, subdirs, files in os.walk(path):
    
            list_files = []

            if len(files) > 0:
                for f in files:
                    fullpath = root + '/' + f
                    list_files.append(fullpath)

            return list_files           

    def rejult(self):         
        text = self.lineEdit.text()
        text2 = self.lineEdit_2.text()
        config = configparser.ConfigParser()
        config.read("ai.ini")
        pid = config['user']['id']
        ppw = config['user']['pw']
        if text == pid and text2 == ppw:
            #self.label.setText("open")
            self.label_3.setPixmap(QtGui.QPixmap("test.png"))
            self.label.setHidden(True)
            self.label_2.setHidden(True)
            self.lineEdit_1.setHidden(True)
            self.lineEdit_2.setHidden(True)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))


class Thread(QThread):
    changePixmap = pyqtSignal(QPixmap)
    def __init__(self, parent=None):
        QThread.__init__(self, parent=parent)
        self.isRunning = True

    def run(self):
            con = sqlite3.connect('./rtsp_2.db')
            cur = con.cursor()
            rtsp_db = pd.read_sql("SELECT * FROM rtsp", con)
            
            cap = cv2.VideoCapture(rtsp_db['address'][0])
            if cap.isOpened() is False:
                #print("1")
                self.isRunning = False
            else :
                self.isRunning = True

            while self.isRunning:
                ret, frame = cap.read()
                rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                convertToQtFormat = QImage(rgbImage.data, rgbImage.shape[1], rgbImage.shape[0], QImage.Format_RGB888)
                convertToQtFormat = QPixmap.fromImage(convertToQtFormat)
                p = convertToQtFormat.scaled(670, 300, Qt.IgnoreAspectRatio) #KeepAspectRatio
                self.changePixmap.emit(p)
                if not ret:
                    self.isRunning = False
                    break
            cap.release()
            cv2.destroyAllWindows()


    def resume(self):
        self.isRunning = True

    def stop(self):
        cv2.destroyAllWindows()
        self.isRunning = False
        
        
class Thread2(QThread):
    changePixmap = pyqtSignal(QPixmap)
    def __init__(self, parent=None):
        QThread.__init__(self, parent=parent)
        self.isRunning = True

    def run(self):
            con = sqlite3.connect('./rtsp_2.db')
            cur = con.cursor()
            rtsp_db = pd.read_sql("SELECT * FROM rtsp", con)
            cap = cv2.VideoCapture(rtsp_db['address'][1])
            if cap.isOpened() is False:
                #print("1")
                self.isRunning = False
            else :
                self.isRunning = True

            while self.isRunning:
                ret, frame = cap.read()
                rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                convertToQtFormat = QImage(rgbImage.data, rgbImage.shape[1], rgbImage.shape[0], QImage.Format_RGB888)
                convertToQtFormat = QPixmap.fromImage(convertToQtFormat)
                p = convertToQtFormat.scaled(670, 300, Qt.IgnoreAspectRatio)
                self.changePixmap.emit(p)
                if not ret:
                    self.isRunning = False
                    break
            cap.release()
            cv2.destroyAllWindows()


    def resume(self):
        self.isRunning = True

    def stop(self):
        cv2.destroyAllWindows()
        self.isRunning = False
        
class Thread3(QThread):
    changePixmap = pyqtSignal(QPixmap)
    def __init__(self, parent=None):
        QThread.__init__(self, parent=parent)
        self.isRunning = True

    def run(self):
            con = sqlite3.connect('./rtsp_2.db')
            cur = con.cursor()
            rtsp_db = pd.read_sql("SELECT * FROM rtsp", con)
            cap = cv2.VideoCapture(rtsp_db['address'][2])
            if cap.isOpened() is False:
                #print("1")
                self.isRunning = False
            else :
                self.isRunning = True

            while self.isRunning:
                ret, frame = cap.read()
                rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                convertToQtFormat = QImage(rgbImage.data, rgbImage.shape[1], rgbImage.shape[0], QImage.Format_RGB888)
                convertToQtFormat = QPixmap.fromImage(convertToQtFormat)
                p = convertToQtFormat.scaled(670, 300, Qt.IgnoreAspectRatio)
                self.changePixmap.emit(p)
                if not ret:
                    self.isRunning = False
                    break
            cap.release()
            cv2.destroyAllWindows()


    def resume(self):
        self.isRunning = True

    def stop(self):
        cv2.destroyAllWindows()
        self.isRunning = False
        
        
class Thread4(QThread):
    changePixmap = pyqtSignal(QPixmap)
    def __init__(self, parent=None):
        QThread.__init__(self, parent=parent)
        self.isRunning = True

    def run(self):
            con = sqlite3.connect('./rtsp_2.db')
            cur = con.cursor()
            rtsp_db = pd.read_sql("SELECT * FROM rtsp", con)
            cap = cv2.VideoCapture(rtsp_db['address'][3])
            if cap.isOpened() is False:
                #print("1")
                self.isRunning = False
            else :
                self.isRunning = True

            while self.isRunning:
                ret, frame = cap.read()
                rgbImage = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                convertToQtFormat = QImage(rgbImage.data, rgbImage.shape[1], rgbImage.shape[0], QImage.Format_RGB888)
                convertToQtFormat = QPixmap.fromImage(convertToQtFormat)
                p = convertToQtFormat.scaled(670, 300, Qt.IgnoreAspectRatio)
                self.changePixmap.emit(p)
                if not ret:
                    self.isRunning = False
                    break
            cap.release()
            cv2.destroyAllWindows()


    def resume(self):
        self.isRunning = True

    def stop(self):
        cv2.destroyAllWindows()
        self.isRunning = False
        
        
class MainWindow1(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setupUi()

    def setupUi(self):
        self.setObjectName("MainWindow1")
        self.resize(400, 300)

        self.lineEdit1 = QtWidgets.QLineEdit(self)
        self.lineEdit1.setGeometry(QtCore.QRect(50, 20, 230, 30))
        self.lineEdit1.setObjectName("lineEdit1")
        self.lineEdit1.returnPressed.connect(self.open1)
        
        self.lineEdit2 = QtWidgets.QLineEdit(self)
        self.lineEdit2.setGeometry(QtCore.QRect(50, 70, 230, 30))
        self.lineEdit2.setObjectName("lineEdit2")
        self.lineEdit2.returnPressed.connect(self.open2)
        
        self.lineEdit3 = QtWidgets.QLineEdit(self)
        self.lineEdit3.setGeometry(QtCore.QRect(50, 120, 230, 30))
        self.lineEdit3.setObjectName("lineEdit3")
        self.lineEdit3.returnPressed.connect(self.open3)
        
        self.lineEdit4 = QtWidgets.QLineEdit(self)
        self.lineEdit4.setGeometry(QtCore.QRect(50, 170, 230, 30))
        self.lineEdit4.setObjectName("lineEdit1")
        self.lineEdit4.returnPressed.connect(self.open4)
        
        # self.rtspButton = QtWidgets.QPushButton(self)
        # self.rtspButton.setGeometry(QtCore.QRect(250, 150, 50, 20))
        # self.rtspButton.setObjectName("rtspButton")
        # self.rtspButton.setText("RTSP")
        # self.rtspButton.clicked.connect(self.open)
        
        self.label_1 = QtWidgets.QLabel(self)
        self.label_1.setGeometry(QtCore.QRect(50, 20, 230, 30))
        self.label_1.setObjectName("label_1")
        
        self.label_2 = QtWidgets.QLabel(self)
        self.label_2.setGeometry(QtCore.QRect(50, 70, 230, 30))
        self.label_2.setObjectName("label_2")
        
        self.label_3 = QtWidgets.QLabel(self)
        self.label_3.setGeometry(QtCore.QRect(50, 120, 230, 30))
        self.label_3.setObjectName("label_3")
        
        self.label_4 = QtWidgets.QLabel(self)
        self.label_4.setGeometry(QtCore.QRect(50, 170, 230, 30))
        self.label_4.setObjectName("label_4")
        
        
  
        
    def open1(self):
        text = self.lineEdit1.text()
        con = sqlite3.connect('./rtsp_2.db')
        cur = con.cursor()
        
        cur.execute("INSERT INTO rtsp (address) VALUES (?);", (text,))

        # 변경 내용 커밋 및 데이터베이스 연결 종료
        con.commit()
        con.close()
        self.lineEdit1.setHidden(True)
        self.label_1.setText("DB저장 완료")
        
    def open2(self):
        text = self.lineEdit2.text()
        con = sqlite3.connect('./rtsp_2.db')
        cur = con.cursor()
        
        cur.execute("INSERT INTO rtsp (address) VALUES (?);", (text,))

        # 변경 내용 커밋 및 데이터베이스 연결 종료
        con.commit()
        con.close()
        self.lineEdit2.setHidden(True)
        self.label_2.setText("DB저장 완료")
        
    def open3(self):
        text = self.lineEdit3.text()
        con = sqlite3.connect('./rtsp_2.db')
        cur = con.cursor()
        
        cur.execute("INSERT INTO rtsp (address) VALUES (?);", (text,))

        # 변경 내용 커밋 및 데이터베이스 연결 종료
        con.commit()
        con.close()
        self.lineEdit3.setHidden(True)
        self.label_3.setText("DB저장 완료")
        
    def open4(self):
        text = self.lineEdit4.text()
        con = sqlite3.connect('./rtsp_2.db')
        cur = con.cursor()
        
        cur.execute("INSERT INTO rtsp (address) VALUES (?);", (text,))

        # 변경 내용 커밋 및 데이터베이스 연결 종료
        con.commit()
        con.close()
        self.lineEdit4.setHidden(True)
        self.label_4.setText("DB저장 완료")    
        
        
        


#     def exit_application(self):
#         QtWidgets.qApp.quit()        
        
# if __name__ == "__main__":
#     import sys #object는 윈도의 최고 조상
#     app = QtWidgets.QApplication(sys.argv) # sys.argv는 현재 작업중인.py 절대 경로를 인자로 넘겨줌
#     MainWindow = QtWidgets.QMainWindow() #윈도우 UI를 연결하기 위한 상속
#     ui = Ui_MainWindow() #위 클래스를 ui 변수에 넣는다 여기서 부터 클래스 개념 필요
#     ui.setupUi(MainWindow) #위 QtWidgets.QMainWindows()에서 상속받아서 위 SetupUi함수 인자로 넘겨줌 즉 위젯 실행하라는 뜻
#     MainWindow.show() #MainWindow를 화면에 표시
#     sys.exit(app.exec_()) #무한루프


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    
    mainWindow1 = MainWindow1()
    mainWindow1.show()
    
    sys.exit(app.exec_())


