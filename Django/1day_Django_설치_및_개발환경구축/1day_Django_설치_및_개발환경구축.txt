1. 아나콘다 가상환경으로 활성화
> conda activate pk_base

2. Django 라이브러리 설치
> conda install -c conda-forge django=4.0.1
또는 로 설치가 안되는 경우
> pip install django==4.0.1

3. 설치확인
> conda list
or
> conda list | findstr django

4. 웹프로젝트 작업디렉토리 생성하기
- 탐색기에서 폴더 생성

5. 프롬프트의 위치를 작업디렉토리 위치로 이동
> cd 작업디렉토리 위치

6. 장고 웹프로젝트 생성하기
    - 장고 웹프로젝트는 웹서버 환경을 당담하는 폴더입니다.
> django-admin startproject 프로젝트명
> django-admin startproject config . (config 한칸 띄우고 점)

- 웹서버 환경이 생성되면 폴더 1개와 파일 1개가 생성됨
  : config 폴더 1개(서버 환경설정 파일 삭제X)
  : manage.py 파일 1개(서버를 구동시키는 파일 삭제X)

7. 웹서버가 잘 설치됐는지 확인하기
- 서버 구동시키기
> python manage.py runserver

Django version 4.0.1, using settings 'config.settings' 
Starting development server at http://127.0.0.1:8000/ <--ctrl+마우스클릭
Quit the server with CTRL-BREAK. <- 서버종료(ctrl+c)

8. 개발 툴
- VS-Code(현재 주로 사용됨)
- Eclips(예전 툴, java 프로젝트 주로 사용됨)
- PyCham(유료)

9. config 폴더 내에서 개발에 사용되는 파일들
- settings.py : 서버 환경설정 담당
                  : 최초의 한번 또는
- urls.py : 웹 URL과 개발코드와의 연결을 담당
            : 웹페이지 개발을 위해 자주 사용됨

10. 웹페이지 생성을 위한 폴더생성 ->  app 생성이라고 칭합니다.
> django-admin startapp 앱이름(웹사이트의 카테고리별로 생성됩니다.)
> django-admin startapp firstapp
   -> 프레임워이 파일들을 만들어 줍니다.
   -> 주로 사용하는 파일 : views.py, models.py(DB영역), urls.py(추후 생성) 

11. 웹프로그램 개발 순서
     - views.py에서 생성할 페이지에 대한 함수 정의
	-> 페이지에 표시할 내용 정의
	-> 또는 별도의 html파일 호출(추후 진행예정)
     -  urls.py에서 사용자(브라우저)가 사용할 url지정
	-> 지정된 url과 응답할 함수(views.py에 정의한 함수) 매핑
	-> 지정된 url을 "url패턴"이라고 칭합니다.

12. 웹프레임워크 주소
- MVT 구조 (java 또는 C계열에서는 MVC 구조라고 합니다.)
<Back-end 영역>
- M(Models.py) : Database 처리 영역
   V(Views.py) : Models와 Templates를 컨트롤한 후 응답해주는 영역
		     (MVC구조에서는 C영역이 됩니다.)
<Front-end 영역>
   T(Templates) : 화면에 보여질 html 페이지(front-end) 제작 영역
		      (MVC구조에서는  V영역이 됩니다.)

13. 웹 개발 담당자
- 개발자 : Back-end 담당
- 퍼블리셔 : 반응형 웹 담당(Front-end담당) <- 주로 개발자가 많이 담당함
- 웹 디자이너 : html, css, 기본적인 javascript 담당(Front-end담당)
		   : 포토샵, 일러스트레이터 -> html, css 코드를 주로 만드는 작업





