# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QPushButton
import configparser 
import cv2
import os
import time

ilist = ['test.jpg', 'test2.jpg', 'test3.jpg', 'test4.jpg', 'test5.jpg', 'test6.jpg', 'test7.jpg', 'test8.jpg', 'test9.jpg', 'test10.jpg']
count = 0

class secondwindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(414, 730)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.calendarWidget = QtWidgets.QCalendarWidget(self.centralwidget)
        self.calendarWidget.setGeometry(QtCore.QRect(70, 60, 272, 183))
        self.calendarWidget.setObjectName("calendarWidget")
        
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(105, 450, 200, 200))
        self.label_4.setObjectName("label_4")
        
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(170, 650, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.pressed.connect(self.open)
        
    
    
        
    # def open(self):
    #     image_files = "rtsp://210.99.70.120:1935/live/cctv001.stream"
        
    #     count = 0
    #     cap = cv2.VideoCapture(image_files)
        
    #     while True:
    #         ret, img = cap.read()
    #         if ret:
    #             cv2.imshow(image_files, img)
    #             cv2.waitKey(33)
    #             count += 1
    #             print(count)
                
    #     else:
    #         print("can not")
            # cap.release()
            # cv2.destroyAllWindows()
            
        #count = 50
        # for image_file in image_files:
        #     cap =cv2.VideoCapture(image_file)
        #     if cap.isOpened():
        #         #frame = 0
        #         while True:
        #             ret, img = cap.read() # ret: 영상이 끊겼는지 아닌지 확인
        #             if ret:
        #                 cv2.imshow(image_file, img)
        #                 cv2.waitKey(33)
        #                 #frame += 1
        #                 #if count == frame:
        #                 #    break
        #             else:
        #                 break
                    
        #     else:
        #         print("can not")
        #     cap.release()
        #     cv2.destroyAllWindows()
        
        #image_files = self.get_files('C:\\study\\20240130')
        #img = cv2.imread(image_files[0])
        #height, width, channel = img.shape
        
        #fps = 1
        
        #fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        #BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        #writer = cv2.VideoWriter(BASE_DIR + '/' + 'output2.mp4', fourcc, fps, (width, height))
        #for file in image_files:
        #    img = cv2.imread(file)
        #    writer.write(img)
        #    cv2.imshow("Color", img)
        #    # ESC키 누르면 중지
        #    if cv2.waitKey(33) == 27:
        #        break
        
    #def get_files(self, path):
        #for root, subdirs, files in os.walk(path):
            
        #    list_files = []
            
        #   if len(files) > 0:
        #        for f in files:
        #            fullpath = root + '/' + f
        #            list_files.append(fullpath)
                    
        #    return list_files
                
            
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(414, 730)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.label_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_1.setGeometry(QtCore.QRect(0, 0, 414, 730))
        self.label_1.setObjectName("label_1")
        self.label_1.setPixmap(QtGui.QPixmap("lock.png"))
        
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(80, 565, 56, 12))
        self.label_3.setObjectName("label_3")
        
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(105, 450, 200, 200))
        self.label_4.setObjectName("label_4")
        
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(172, 455, 180, 22))
        self.lineEdit.setObjectName("lineEdit")
        
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(172, 508, 180, 22))
        self.lineEdit_2.setObjectName("lineEdit_2")
        
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(278, 560, 75, 23))
        self.pushButton.setObjectName("pushButton")
        
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.lineEdit_2.returnPressed.connect(self.open)
        self.pushButton.pressed.connect(self.open)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "result"))
    
    def open(self):
        config = configparser.ConfigParser()
        config.read("test.ini")
        iid = config['user']['id']
        text = self.lineEdit.text()
        ppw = config['user']['pw']
        text2 = self.lineEdit_2.text()
        if text == iid and text2 == ppw :
            self.window = QtWidgets.QWidget()
            self.ui = secondwindow()
            self.ui.setupUi(self.window)
            self.window.show()
            MainWindow.hide()
        else:
            self.label_3.setText("close")
            
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

