"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2qlv@x7p4m3t6p2x%3wf#(gjm^)&23zw*^n2tiom*ejpf&$-q3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

### (추가부분) 도메인 IP 주소 입력
ALLOWED_HOSTS = ['127.0.0.1']


# Application definition
#### (추가사항 )app이 새로 생성되는 경우에는 항상 추가해 주는 것이 좋습니다.
INSTALLED_APPS = [
    'firstapp',
    'secondapp',
    'mainapp',
    'thirdapp',
    'frontapp',
    'mysqlapp',
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

### (추가설정)
# Django 서버내 페이지에서 자체 백엔드 페이지를 iframe으로 보여주기 설정
X_FRAME_OPTIONS = "SAMEORIGIN"

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        ### (추가부분) : 프론트앤드 영역 지정 -> HTML 파일의 위치 폴더 지정
        'DIRS': [BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    
    ### MySQL 접속 정보 추가하기
    # - 'mysql' : 각 app에서 DB에 접속하기 위한 key값(임의 지정 가능)
    # - 'ENGINE' : django에서 DB연결을 컨트롤하는 라이브러리 지정
    #            : mysqlclient 라이브러 설치 필요(pip install mysqlclient)
    # - 'NAME'   : DB 이름
    'mysql' : {
        'ENGINE' : 'django.db.backends.mysql',
        'NAME' : 'pknudb',
        'USER' : 'pknu',
        'PASSWORD' : 'DBDB',
        'HOST' : 'localhost',
        'PORT' : '3306',
    }
}

### 각 App에서 DB를 사용할 수 있도록 연결 설정을 해야함
# - 서버가 구동될 때 각 APP에서 자동으로 연결됨
# - 자동으로 연결할 APP 등록을 해야함
# - 작성 규칙 : 앱이름.router파일명.DBRouter클래스명
#              (파일명과 클래스명은 변경 가능)
# - 연결할 App이 여러개이면, 모두 콤마 뒤에 작성규칙에 따라 추가하면 됩니다.
DATABASE_ROUTERS = [
    'mysqlapp.router.DBRouter',   
]

### Django와 DB와 주고받는 SQL구문을 프로프트(console)에서 확인가능
LOGGING = {
    'version' : 1,
    'disable_existing_loggers' : False,
    'handlers' : {
        'console' : {
            'level' : 'DEBUG',
            'class' : 'logging.StreamHandler',
        }
    },
    'loggers' : {
        'django.db.backends' : {
            'handlers' : ['console'],
            'level' : 'DEBUG',
        }
    },
}



# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

### (추가부분) : 한글로 수정
# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ko-kr'

### (추가부분) : 한국 시간대로 변경하기
# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

### (추가부분) : 프론트앤드 영역 지정 -> 정적파일이 위치하는 공간 지정
# - CSS, Javascript, 이미지, 동영상 등등...
STATICFILES_DIRS = [BASE_DIR/'static']

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

### 세션(session) 처리
# - 브라우저가 닫히면 세션 정보 삭제하기
SESSION_EXPIRE_AT_BROWSER_CLOSE = True